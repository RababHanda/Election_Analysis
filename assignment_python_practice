# print("Hello World")
# counties = ["Arapahoe","Denver","Jefferson"]

# voting_data = [{"county":"Arapahoe", "registered_voters": 422829},
#                 {"county":"Denver", "registered_voters": 463353},
#                 {"county":"Jefferson", "registered_voters": 432438}]

# #for county_dict in voting_data:
#  #   print(county_dict)

# #for i in range(len(voting_data)):
#  #   print(voting_data[i])

# for county_dict in voting_data:
#     for value in county_dict.values():
#         print(value)

"""PyPoll Homework Challenge Solution."""
# Add our dependencies.
import csv
import os

# Add a variable to load a file from a path.
file_to_load = os.path.join("election_results1.csv")
# Add a variable to save the file to a path.
file_to_save = os.path.join("analysis", "election_analysis1.txt")

# Initialize a total vote counter.
total_votes = 0

# Storing votes per candidate per county
counties_result = {}

# Overall election results
county_turnout = 0
winning_county = ""

# Winning candidate results
winning_candidate = ""
winning_count = 0
winning_percentage = 0

# # Candidate Options and candidate votes.
# candidate_options = []
# candidate_votes = {}

# # 1: Create a county list and county votes dictionary.
# county_options = []
# county_turnout = {}
# votes_county_candidate = {}
# votes_per_candidate = {}
# # Track the winning candidate, vote count and percentage
# winning_candidate = ""
# winning_count = 0
# winning_percentage = 0

# # 2: Track the largest county and county voter turnout.
# winning_county = ""
# winning_turnout = 0

# Read the csv and convert it into a list of dictionaries
with open(file_to_load) as election_data:
    reader = csv.reader(election_data)
    # Read the header
    next(reader)

    # For each row in the CSV file.
    for row in reader:

        # Add to the total vote count
        total_votes += 1

        # Get the candidate name from each row.
        candidate_name = row[2]

        # 3: Extract the county name from each row.
        county_name = row[1]

        if county_name not in counties_result: #If county does not exist
            counties_result[county_name] ={}
        if candidate_name not in counties_result[county_name]:
            counties_result[county_name][candidate_name] = 1
        else:
            counties_result[county_name][candidate_name] += 1

    print("Counties Result: ", counties_result)

    #To track candidate performance
    per_county_turnout = {}
    overall_candidate_votes = {}

    for county_name in counties_result:
        if county_name not in per_county_turnout:
            per_county_turnout[county_name] = 0
        for candidate_name in counties_result[county_name]:
            per_county_turnout[county_name] += counties_result[county_name][candidate_name]
            if candidate_name not in overall_candidate_votes:
                overall_candidate_votes[candidate_name] = 0
            overall_candidate_votes[candidate_name] += counties_result[county_name][candidate_name]
    
    print("Per County Turnout: ", per_county_turnout)
    print("Overall Candidate Votes: ", overall_candidate_votes)

    winning_candidate = sorted(overall_candidate_votes, key=overall_candidate_votes.get, reverse=True)[0]
    winning_count = sorted(overall_candidate_votes.values(), reverse=True)[0]
    winning_percentage = 100 * float(winning_count) / float(total_votes)
    
    print('Winning Candidate : ', winning_candidate)
    print('Winning Count : ', winning_count)
    print('Winning Percentage', winning_percentage)

    winning_county = sorted(per_county_turnout, key=per_county_turnout.get, reverse=True)[0]
    county_turnout = sorted(per_county_turnout.values(), reverse=True)[0]

    print('Winning County: ', winning_county)
    print('County Turnout', county_turnout)

    
    
    # for county in county_options:
    #     for candidate in candidate_options:
    #         for row in reader:
    #             if row[1] == county & row[2] == candidate:
    #                 votes_per_candidate[candidate] += 1
    #         votes_county_candidate[county] = votes_per_candidate

    # print(votes_county_candidate)
    # clear

    # for candidate in candidate_options:
    #     votes_per_candidate[candidate] = 0
    #     for county in county_options:
    #         for row in reader:
    #             votes_per_candidate[candidate] += 1
    #             votes_county_candidate[county] = votes_per_candidate
    # print(votes_per_candidate)

#########################

    # for county in county_options:
    #     for rows in reader:
    #         for candidate in candidate_options:
    #             votes_per_candidate[candidate]=0
    #         while row[1]== county:
    #             votes_per_candidate[candidate]+=1
    #     votes_county_candidate[county]=votes_per_candidate

    # print(votes_per_candidate)
    # print(votes_county_candidate)

# # Save the results to our text file.
# with open(file_to_save, "w") as txt_file:

#     # Print the final vote count (to terminal)
#     election_results = (
#         f"\nElection Results\n"
#         f"-------------------------\n"
#         f"Total Votes: {total_votes:,}\n"
#         f"-------------------------\n\n"
#         f"County Votes:\n")
#     #print(election_results, end="")

#     #txt_file.write(election_results)

#     ## 6a: Write a for loop to get the county from the county dictionary.
#     for county_name in county_turnout:

#         ## 6b: Retrieve the county vote count.
#         turnout = county_turnout.get(county_name)
#         ## 6c: Calculate the percentage of votes for the county.
#         turnout_percentage = turnout/total_votes*100
#         turnout_results = (
#             f"{county_name}: {turnout_percentage:.1f}% ({turnout:,})\n"
#         )
#          ## 6d: Print the county results to the terminal.
#         #print(turnout_results, end='')
#          ## 6e: Save the county votes to a text file.
#         #txt_file.write(turnout_results) ########
#         #print(turnout_results, file=txt_file)
#          ## 6f: Write an if statement to determine the winning county and get its vote count.
#         if (turnout>winning_turnout):
#             winning_county = county_name
#             winning_turnout = turnout
#             winning_county_summary = (
#                 f"\n-------------------------\n"
#                 f"Largest County Turnout: {winning_county}\n"
#                 f"-------------------------\n"
#             )


#     ## 7: Print the county with the largest turnout to the terminal.
#     #print(winning_county_summary)

#     ## 8: Save the county with the largest turnout to a text file.
#     #txt_file.write(winning_county_summary)

#     # Save the final candidate vote count to the text file.
#     for candidate_name in candidate_votes:

#         # Retrieve vote count and percentage
#         votes = candidate_votes.get(candidate_name)
#         vote_percentage = float(votes) / float(total_votes) * 100
#         candidate_results = (
#             f"{candidate_name}: {vote_percentage:.1f}% ({votes:,})\n")

#         # Print each candidate's voter count and percentage to the
#         # terminal.
#         #print(candidate_results)
#         #  Save the candidate results to our text file.
#         txt_file.write(candidate_results)

#         # Determine winning vote count, winning percentage, and candidate.
#         if (votes > winning_count) and (vote_percentage > winning_percentage):
#             winning_count = votes
#             winning_candidate = candidate_name
#             winning_percentage = vote_percentage

#     # Print the winning candidate (to terminal)
#     winning_candidate_summary = (
#         f"-------------------------\n"
#         f"Winner: {winning_candidate}\n"
#         f"Winning Vote Count: {winning_count:,}\n"
#         f"Winning Percentage: {winning_percentage:.1f}%\n"
#         f"-------------------------\n")
#     #print(winning_candidate_summary)

#     # Save the winning candidate's name to the text file
#     #txt_file.write(winning_candidate_summary)